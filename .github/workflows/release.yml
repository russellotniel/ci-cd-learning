name: Release to Production

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: |
      !startsWith(github.event.head_commit.message, 'chore(release)') &&
      !startsWith(github.event.head_commit.message, 'merge:')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      
      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with: 
          node-version: "22"

      - name: Cache npm
        id: npm-cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-${{ steps.setup-node.outputs.node-version }}-

      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Check if current commit is already tagged
        id: check-tag
        run: |
          CURRENT_VERSION=v$(node -p "require('./package.json').version")
          if git rev-parse "$CURRENT_VERSION" >/dev/null 2>&1; then
            TAG_COMMIT=$(git rev-parse "$CURRENT_VERSION")
            HEAD_COMMIT=$(git rev-parse HEAD)
            if [ "$TAG_COMMIT" = "$HEAD_COMMIT" ]; then
              echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
              echo "VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "Found existing tag $CURRENT_VERSION on head commit"
              exit 0
            fi
          fi
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          echo "No tag matching head commit found"
      
      - name: Generate Release Version
        if: steps.check-tag.outputs.TAG_EXISTS != 'true'
        id: version
        run: |
          # Run standard-version to bump version and update CHANGELOG
          npm run release
          
          # Extract the new version
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Released version: v${VERSION}"
      
      - name: Push to both main and dev branches
        if: steps.check-tag.outputs.TAG_EXISTS != 'true'
        run: |
          # Push to main with tags
          git push origin main --follow-tags
          
          # IMPORTANT: Also push the same commit to dev to keep them synchronized
          # This prevents divergence and allows future rebasing
          git push origin HEAD:dev --force
          
          echo "âœ… Pushed release commit to both main and dev branches"
      
      # Set version for Docker (from either check-tag or version step)
      - name: Set version for Docker
        id: docker-version
        run: |
          if [[ "${{ steps.check-tag.outputs.TAG_EXISTS }}" == "true" ]]; then
            echo "VERSION=${{ steps.check-tag.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi
          echo "Docker images will be tagged with: $VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            russellotniel/personal-repository:${{ steps.docker-version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create GitHub Release
        if: steps.check-tag.outputs.TAG_EXISTS != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.docker-version.outputs.VERSION }}
          body_path: CHANGELOG.md
          generate_release_notes: true
          token: ${{ secrets.RELEASE_TOKEN }}